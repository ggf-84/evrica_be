<?php

namespace Tests\Unit;

use App\Models\Counterparties;
use App\Models\User;
use Tests\TestCase;

class CounterpartiesTest extends TestCase
{

    protected $user;
    protected $company;
    protected $headers;

    /**
     * Set Up test
     */
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::where('email', 'test@mail.com')->first();
        $this->headers = $this->headers($this->user);
    }

    /**
     * @group counterparties
     */
    //Test adding new counterpart
    public function testAddCounterpart()
    {

        $payload = [
            'firstname' => \Faker\Factory::create()->firstName(),
            'lastname' => \Faker\Factory::create()->lastName(),
            'email' => \Faker\Factory::create()->email(),
            'type_id' => 1,
        ];

        //try to add new counterpart
        $response = $this->post($this->path . '/counterparties', $payload, $this->headers)
            ->assertSuccessful()
            ->assertJsonStructure(['data' => ['id', 'firstname', 'lastname', 'email']]);

        Counterparties::find($response->getData()->id)->delete();

        // dd($response);
    }

    /**
     * @group counterparties
     */
    public function testActivationOfCounterpart()
    {

        $payload = [
            "company_id" => $this->user->company_id,
            'firstname' => \Faker\Factory::create()->firstName(),
            'lastname' => \Faker\Factory::create()->lastName(),
            'email' => \Faker\Factory::create()->email(),
            'type_id' => 1,
        ];

        Counterparties::insert($payload);
        $counterpart = Counterparties::where('email', $payload['email'])->first();

        $payload['id'] = $counterpart->id;

        $response = $this->post($this->path . '/counterparties/activate', $payload, $this->headers)
            ->assertSuccessful()
            ->assertJsonFragment(['data' => ['1 records successful activated!']]);

        User::where('email', $counterpart->email)->delete();
        Counterparties::find($counterpart->id)->delete();
    }

    /**
     * @group counterparties
     */
    public function testUpdateCounterpart()
    {
        $update = $insert = [
            "company_id" => $this->user->company_id,
            'firstname' => \Faker\Factory::create()->firstName(),
            'lastname' => \Faker\Factory::create()->lastName(),
            'email' => \Faker\Factory::create()->email(),
            'type_id' => 1,
        ];

        Counterparties::insert($insert);

        $counterpart = Counterparties::where('email', $insert['email'])->first();

        $update['email'] = 'myUpdate@mail.com';

        $this->put($this->path . '/counterparties/' . $counterpart->id, $update, $this->headers)
            ->assertSuccessful()
            ->assertJsonFragment($update);

        Counterparties::find($counterpart->id)->delete();
    }

}
