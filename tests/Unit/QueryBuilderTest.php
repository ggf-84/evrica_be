<?php

namespace Tests\Unit;

use App\Helpers\QueryBuilder\QueryParser;
use App\Models\Counterparties;
use App\Models\Language;
use App\Models\Quote;
use App\Models\User;
use Tests\TestCase;

class QueryBuilderTest extends TestCase
{
    protected $user;
    protected $company;
    protected $headers;
    protected $queryBuilder;

    /**
     * Set Up test
     */
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::where('email', 'test@mail.com')->first();
        $this->headers = $this->headers($this->user);
    }

    public function testLimitPage()
    {
        $result = Counterparties::where('company_id', $this->user->company_id)->take(3)->skip(3)->get()->toArray();

        $response = $this->get($this->path . '/counterparties?_limit=3&_page=2', $this->headers)
            ->assertSuccessful();

        $response = $response->getData();

        $this->assertEquals(json_encode($result), json_encode($response));
    }

    public function testSortByFieldFromEntity()
    {
        // order by one field
        $result = Counterparties::where('company_id', $this->user->company_id)
            ->take(QueryParser::DEFAULT_LIMIT)
            ->orderBy('firstname')
            ->get()->toArray();
        $response = $this->get($this->path . '/counterparties?_sort=firstname', $this->headers)
            ->assertSuccessful();
        $response = $response->getData();
        $this->assertEquals(json_encode($result), json_encode($response));

        // order by  two fields
        $result = Counterparties::where('company_id', $this->user->company_id)
            ->take(QueryParser::DEFAULT_LIMIT)
            ->orderBy('firstname')
            ->orderBy('lastname')
            ->get()->toArray();
        $response = $this->get($this->path . '/counterparties?_sort=firstname,lastname', $this->headers)
            ->assertSuccessful();
        $response = $response->getData();
        $this->assertEquals(json_encode($result), json_encode($response));

        // order by  two fields
        $result = Counterparties::where('company_id', $this->user->company_id)
            ->take(QueryParser::DEFAULT_LIMIT)
            ->orderBy('firstname', 'DESC')
            ->orderBy('lastname', 'DESC')
            ->get()->toArray();
        $response = $this->get($this->path . '/counterparties?_sort=-firstname,-lastname', $this->headers)
            ->assertSuccessful();
        $response = $response->getData();
        $this->assertEquals(json_encode($result), json_encode($response));
    }

    public function testSortByFieldFromRelation()
    {
        // order by one field
        $result = Counterparties::select('counterparty.*')
            ->leftJoin('country', 'counterparty.country_id', '=', 'country.id')
            ->leftJoin('country_i18n', function ($join) {
                $join->on('country_i18n.country_id', '=', 'country.id')
                    ->where('country_i18n.language_id', Language::where('code', 'like', 'en')->first()->id || 1);
            })
            ->with(['country'])
            ->where('company_id', $this->user->company_id)
            ->take(QueryParser::DEFAULT_LIMIT)
            ->orderBy('country_i18n.title')
            ->get()->toArray();

        $response = $this->get($this->path . '/counterparties?_with=country&_sort=country.title', $this->headers)
            ->assertSuccessful();
        $response = $response->getData();
        $this->assertEquals(json_encode($result), json_encode($response));

        $result = Counterparties::select('counterparty.*')
            ->leftJoin('country', 'counterparty.country_id', '=', 'country.id')
            ->leftJoin('country_i18n', function ($join) {
                $join->on('country_i18n.country_id', '=', 'country.id')
                    ->where('country_i18n.language_id', Language::where('code', 'like', 'en')->first()->id || 1);
            })
            ->with(['country'])
            ->where('company_id', $this->user->company_id)
            ->take(QueryParser::DEFAULT_LIMIT)
            ->orderBy('country_i18n.title', 'DESC')
            ->orderBy('firstname', 'ASC')
            ->get()->toArray();

        $response = $this->get($this->path . '/counterparties?_with=country&_sort=-country.title,firstname&_limit', $this->headers)
            ->assertSuccessful();
        $response = $response->getData();
        $this->assertEquals(json_encode($result), json_encode($response));
    }

    public function testWith()
    {
        // order by one field
        $result = Counterparties::select('counterparty.*')
            ->where('company_id', $this->user->company_id)
            ->with(['country'])
            ->take(QueryParser::DEFAULT_LIMIT)
            ->get()->toArray();

        $response = $this->get($this->path . '/counterparties?_with=country', $this->headers)
            ->assertSuccessful();
        $response = $response->getData();
        $this->assertEquals(json_encode($result), json_encode($response));

        $result = Counterparties::select('counterparty.*')
            ->where('company_id', $this->user->company_id)
            ->with(['country', 'state', 'company', 'state.country'])
            ->take(QueryParser::DEFAULT_LIMIT)
            ->get()->toArray();

        $response = $this->get($this->path . '/counterparties?_with=country,state,company,state.country', $this->headers)
            ->assertSuccessful();
        $response = $response->getData();
        $this->assertEquals(json_encode($result), json_encode($response));
    }

    public function testComparisionFilters()
    {
        $comparisonFilters = [
            'lt' => '<',
            'eq' => '=',
            'gt' => '>',
            'ge' => '>=',
            'le' => '<=',
            'not' => '!=',
        ];

        foreach ($comparisonFilters as $key => $filter) {
            $result = Counterparties::select('counterparty.*')
                ->where('company_id', $this->user->company_id)
                ->where('id', $filter, 10)
                ->take(3)
                ->get()->toArray();

            $response = $this->get($this->path . '/counterparties?_limit=3&_filters[]=id-' . $key . '=10', $this->headers)
                ->assertSuccessful();

            $response = $response->getData();
            $this->assertEquals(json_encode($result), json_encode($response));
        }
    }

    public function testLikeFilter()
    {
        //test LIKE
        $result = Counterparties::select('counterparty.*')
            ->where('company_id', $this->user->company_id)
            ->where('lastname', 'LIKE', 'John')
            ->take(3)
            ->get()->toArray();

        $response = $this->get($this->path . '/counterparties?_limit=3&_filters[]=lastname-lk=John', $this->headers)
            ->assertSuccessful();

        $response = $response->getData();
        $this->assertEquals(json_encode($result), json_encode($response));

        //Test partial LIKE
        $result = Counterparties::select('counterparty.*')
            ->where('company_id', $this->user->company_id)
            ->where('lastname', 'LIKE', 'Jo%')
            ->take(3)
            ->get()->toArray();

        $response = $this->get($this->path . '/counterparties?_limit=3&_filters[]=lastname-lk=Jo*', $this->headers)
            ->assertSuccessful();

        $response = $response->getData();
        $this->assertEquals(json_encode($result), json_encode($response));

        //Test search in words with LIKE
        $result = Counterparties::select('counterparty.*')
            ->where('company_id', $this->user->company_id)
            ->where('lastname', 'LIKE', '%jo%')
            ->take(3)
            ->get()->toArray();

        $response = $this->get($this->path . '/counterparties?_limit=3&_filters[]=lastname-lk=*jo*', $this->headers)
            ->assertSuccessful();

        $response = $response->getData();
        $this->assertEquals(json_encode($result), json_encode($response));


        //test NOT LIKE
        $result = Counterparties::select('counterparty.*')
            ->where('company_id', $this->user->company_id)
            ->where('firstname', 'NOT LIKE', 'Aman%')
            ->take(3)
            ->get()->toArray();

        $response = $this->get($this->path . '/counterparties?_limit=3&_filters[]=firstname-not-lk=Aman*', $this->headers)
            ->assertSuccessful();

        $response = $response->getData();
        $this->assertEquals(json_encode($result), json_encode($response));
    }

    public function testWhereIN()
    {
        //test WHERE IN
        $result = Counterparties::select('counterparty.*')
            ->where('company_id', $this->user->company_id)
            ->whereIn('id', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
            ->take(3)
            ->get()->toArray();

        $response = $this->get($this->path . '/counterparties?_limit=3&_filters[]=id-in=1,2,3,4,5,6,7,8,9,10', $this->headers)
            ->assertSuccessful();

        $response = $response->getData();
        $this->assertEquals(json_encode($result), json_encode($response));

        //test WHERE NOT IN
        $result = Counterparties::select('counterparty.*')
            ->where('company_id', $this->user->company_id)
            ->whereNotIn('id', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
            ->take(3)
            ->get()->toArray();

        $response = $this->get($this->path . '/counterparties?_limit=3&_filters[]=id-not-in=1,2,3,4,5,6,7,8,9,10', $this->headers)
            ->assertSuccessful();

        $response = $response->getData();
        $this->assertEquals(json_encode($result), json_encode($response));
    }

    public function testBetween()
    {
        //test WHERE BETWEEN
        $result = Counterparties::select('counterparty.*')
            ->where('company_id', $this->user->company_id)
            ->whereBetween('id', [1, 10])
            ->take(3)
            ->get()->toArray();

        $response = $this->get($this->path . '/counterparties?_limit=3&_filters[]=id-between=1,10', $this->headers)
            ->assertSuccessful();

        $response = $response->getData();
        $this->assertEquals(json_encode($result), json_encode($response));
    }

    public function testSimpleOrOnColumn()
    {
        // TEST Simple OR on a single column
        $result = Counterparties::select('counterparty.*')
            ->where('company_id', $this->user->company_id)
            ->where(function ($q) {
                $q->where('firstname', 'LIKE', 'Amanda%')
                    ->orWhere('firstname', 'LIKE', 'John%%');
            })
            ->take(3)
            ->get()->toArray();

        $response = $this->get($this->path . '/counterparties?_limit=3&_filters[]=firstname-lk=Amanda*|John*', $this->headers)
            ->assertSuccessful();

        $response = $response->getData();
        $this->assertEquals(json_encode($result), json_encode($response));
    }

    public function testOrOperatorInFilters()
    {
        // TEST where OR where
        $result = Counterparties::select('counterparty.*')
            ->where('company_id', $this->user->company_id)
            ->where(function ($q) {
                $q->where('lastname', 'LIKE', 'Amanda%')
                    ->orWhere('firstname', 'LIKE', 'John%');
            })
            ->take(3)
            ->get()->toArray();

        $response = $this->get($this->path . '/counterparties?_limit=3&_filters[]=lastname-lk=Amanda*-!or!-firstname-lk=John*', $this->headers)
            ->assertSuccessful();

        $response = $response->getData();
        $this->assertEquals(json_encode($result), json_encode($response));
    }

    public function testAndOperatorInFilters()
    {
        // TEST where and where
        $result = Counterparties::select('counterparty.*')
            ->where('company_id', $this->user->company_id)
            ->where(function ($q) {
                $q->where('lastname', 'LIKE', 'A%')
                    ->where('firstname', 'LIKE', 'John%');
            })
            ->take(5)
            ->get()->toArray();

        $response = $this->get($this->path . '/counterparties?_limit=5&_filters[]=lastname-lk=A*-!and!-firstname-lk=John*', $this->headers)
            ->assertSuccessful();

        $response = $response->getData();
        $this->assertEquals(json_encode($result), json_encode($response));
    }

    public function testAndOrOperatorInFilters()
    {
        // TEST where and (where or where)
        $result = Counterparties::select('counterparty.*')
            ->leftJoin('country', 'counterparty.country_id', '=', 'country.id')
            ->leftJoin('country_i18n', function ($join) {
                $join->on('country_i18n.country_id', '=', 'country.id')
                    ->where('country_i18n.language_id', '=', 1);
            })
            ->with(['country'])
            ->where('counterparty.company_id', $this->user->company_id)
            ->where(function ($q) {
                $q->where('lastname', 'LIKE', 'A%')
                    ->orWhere('firstname', 'LIKE', '%jo%');
            })
            ->where(function ($q) {
                $q->where('email', 'LIKE', '%gmail%')
                    ->orWhere('country_i18n.title', 'LIKE', 'A%');
            })
            ->orderBy('counterparty.id')
            ->take(5)
            ->get('id')->toArray();

        $response = $this->get($this->path . '/counterparties?_with=country&_limit=5&_filters[]=lastname-lk=A*-!or!-firstname-lk=*jo*-!and!-email-lk=*gmail*-!or!-country.title-lk=A*&_sort=id', $this->headers)
            ->assertSuccessful();

        $response = $response->getData();
        $this->assertEquals(json_encode($result), json_encode($response));

        $response = $this->get($this->path . '/counterparties?_with=country&_limit=5&_filters[]=lastname-lk=A*-!or!-firstname-lk=*jo*&_filters[]=email-lk=*gmail*-!or!-country.title-lk=A*&_sort=id', $this->headers)
            ->assertSuccessful();

        $response = $response->getData();
        $this->assertEquals(json_encode($result), json_encode($response));
    }

    public function testFiltersParamIsNotArrayError()
    {
        $response = $this->get($this->path . '/counterparties?_filters=abc', $this->headers)
            ->assertStatus(419)
            ->assertJsonFragment(['message' => "Parameter _filters must be an array!"]);

    }

    public function testFilterColumnError()
    {
        $response = $this->get($this->path . '/counterparties?_filters[]=abc', $this->headers)
            ->assertStatus(419)
            ->assertJsonFragment(['message' => "Table counterparty doesn't contain column abc"]);
    }

    public function testFilterFormatError()
    {
        $response = $this->get($this->path . '/counterparties?_filters[]=firstname-like=abc*', $this->headers)
            ->assertStatus(419)
            ->assertJsonFragment(['message' => "Undefined filter: like in firstname-like=abc*"]);
    }

    public function testUndefinedSortFieldError()
    {
        $response = $this->get($this->path . '/counterparties?_sort=abc', $this->headers)
            ->assertStatus(419)
            ->assertJsonFragment(['message' => "Table counterparty doesn't contain column abc"]);
    }

    public function testUndefinedRelationError()
    {
        $response = $this->get($this->path . '/counterparties?_with=abc', $this->headers)
            ->assertStatus(419)
            ->assertJsonFragment(['message' => "Unknown Relation abc in Counterparties"]);
    }

    public function testFieldNotIncludedOnSortError()
    {
        $response = $this->get($this->path . '/counterparties?_sort=country.title', $this->headers)
            ->assertStatus(419)
            ->assertJsonFragment(['message' => "Relation country not included in _with parameter for column title"]);
    }

    public function testFieldNotIncludedOnFilterError()
    {
        $response = $this->get($this->path . '/counterparties?_filters[]=country.title-lk=Arg*', $this->headers)
            ->assertStatus(419)
            ->assertJsonFragment(['message' => "Relation country not included in _with parameter for column title"]);
    }

    public function testSearchByMultipleFields()
    {
        // TEST search
        $result = Counterparties::select('counterparty.*')
            ->leftJoin('country', 'counterparty.country_id', '=', 'country.id')
            ->leftJoin('country_i18n', function ($join) {
                $join->on('country_i18n.country_id', '=', 'country.id')
                    ->where('country_i18n.language_id', '=', 1);
            })
            ->with(['country'])
            ->where('counterparty.company_id', $this->user->company_id)
            ->where(function ($q) {
                $q->where('lastname', 'LIKE', '%Alex%')
                    ->orWhere('email', 'LIKE', '%Alex%')
                    ->orWhere('firstname', 'LIKE', '%Alex%')
                    ->orWhere('country_i18n.title', 'LIKE', '%Alex%');
            })
            ->orderBy('counterparty.id')
            ->take(5)
            ->get()->toArray();

        $response = $this->get($this->path . "/counterparties?_with=country&_limit=5&"
                               . "_filters[]=lastname-lk=*Alex*-!or!-email-lk=*Alex*-!or!-firstname-lk=*Alex*-!or!-country.title-lk=*Alex*", $this->headers)
            ->assertSuccessful();

        $response = $response->getData();
        $this->assertEquals(json_encode($result), json_encode($response));
    }

    public function testWithManyToMany()
    {
        $result = Quote::select('quote.*')
            ->with(['products'])
            ->where('quote.company_id', $this->user->company_id)
            ->orderBy('quote.id')
            ->take(5)
            ->get()->toArray();

        $response = $this->get($this->path . "/quotes?_with=products&_limit=5", $this->headers)
            ->assertSuccessful();

        $response = $response->getData();
        $this->assertEquals(json_encode($result), json_encode($response));
    }
}