<?php

namespace Tests\Unit;

use App\Facades\PermissionHelper;
use App\Models\Company;
use App\Models\CompanyLanguage;
use App\Models\CompanySettings;
use App\Models\Department;
use App\Models\DepartmentRoles;
use App\Models\DepartmentUsers;
use App\Models\Permission;
use App\Models\Role;
use App\Models\RolePermission;
use App\Models\User;
use Illuminate\Support\Facades\Hash;
use Tests\TestCase;

class PermissionsTest extends TestCase
{
    protected $user;
    protected $company;
    protected $department;
    protected $headers;

    protected $managePermissionsRole;
    protected $manageCurrenciesRole;

    protected $permissionsManage = [
        ['id' => 991, 'code' => 'department_role-read'],
        ['id' => 992, 'code' => 'department_role-write'],
        ['id' => 993, 'code' => 'department_role-delete'],
        ['id' => 994, 'code' => 'company-read'],
        ['id' => 995, 'code' => 'company-write'],
        ['id' => 996, 'code' => 'company-delete'],
        ['id' => 1009, 'code' => 'order-read'],
        ['id' => 999, 'code' => 'user-read'],
        ['id' => 998, 'code' => 'user-write'],
        ['id' => 997, 'code' => 'user-delete'],
        ['id' => 1000, 'code' => 'permission-read'],
        ['id' => 1001, 'code' => 'permission-write'],
        ['id' => 1002, 'code' => 'permission-delete'],
        ['id' => 1003, 'code' => 'role-read'],
        ['id' => 1004, 'code' => 'role-write'],
        ['id' => 1005, 'code' => 'role-delete'],
    ];

    protected $currencyPermissions = [
        ['id' => 1006, 'code' => 'currency-read'],
        ['id' => 1007, 'code' => 'currency-write'],
        ['id' => 1008, 'code' => 'currency-delete'],
    ];

    /**
     *
     */
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->removeAllTestData();
        $this->prepareTestEnvironment();
    }

    //TEST functions

    /**
     * @group permission
     * Test
     */
    public function testGetUserRoles()
    {
        //  var_dump($this->headers($this->user));

        //get all permissions for system
        $this->get($this->path . '/permission', $this->headers)
            ->assertSuccessful()
            ->assertJsonStructure(['data' => ["*" => ['id', 'code']]]);

        //get all permissions for current user
        $this->get($this->path . '/role/available', $this->headers)
            ->assertSuccessful()
            ->assertJsonStructure(['data' => ["*" => ['id', 'code']]]);

        //get list of roles
        $this->get($this->path . '/role', $this->headers)
            ->assertSuccessful()
            ->assertJsonStructure(['data' => ["*" => ['id', 'code']]]);

        //get list of permissions by role
        $this->get($this->path . '/role/123123/permissions', $this->headers)
            ->assertSuccessful()
            ->assertJsonStructure(['data' => ["*" => ['id', 'code']]]);;
    }

    /**
     * @group permission
     * @test
     * Test insert, delete permission
     */
    public function testInsertDeletePermissions()
    {
        Permission::where('code', 'products-read')->delete();

        //TEST insert new permission
        $this->post($this->path . '/permission',
                    [
                        'code' => 'products-read',
                    ], $this->headers)
            ->assertSuccessful();

        $permission = Permission::where('code', 'products-read')->first();
        $deletePath = $this->path . '/permission/' . $permission->id;
        //  var_dump($deletePath);

        //Test delete inserted permission
        // delete
        $response = $this->delete($this->path . '/permission/' . $permission->id, $this->headers)
            ->assertSuccessful();

    }

    /**
     * @group permission
     * @test
     * Test set permissions to role
     */
    public function testAddPermissionsToRole()
    {
        //Set of read/write/delete permissions for Currency
        $data = [
            ['id' => 1006],
            ['id' => 1007],
            ['id' => 1008],
        ];

        //try to get currency without permission. 403 status code is expected
//        $this->get($this->path . '/currency', $this->headers)->assertStatus(403);
        $this->assertFalse(PermissionHelper::can('currency-read', $this->user));

        //TEST insert new permission to role
        $this->post($this->path . '/role/permission',
                    ['permissions' => $data, 'role' => ['id' => $this->managePermissionsRole->id]], $this->headers)
            ->assertSuccessful();

        //check if user has currency-read role after insert permission to role request
        $this->assertTrue(PermissionHelper::can('currency-read', $this->user));

        //try to get currency with permission. Expected status code 200.
        $this->get($this->path . '/currency', $this->headers)->assertStatus(200);
    }

    /**
     * @group permission1
     * @test
     * Test
     * create new role
     * set role to department
     * remove role from department
     * delete role
     *
     */
    public function testRoleDepartment()
    {

        $role_name = 'TestRole' . rand();
        //TEST insert new role
        $this->post($this->path . '/role',
                    ['code' => $role_name], $this->headers)
            ->assertSuccessful();

        $insertedRole = Role::where('code', $role_name)->first();


        //TEST if role exists
        $this->get($this->path . '/role?_filters[]=code-eq=TestRole', $this->headers)
            ->assertSuccessful();

        if ($insertedRole) {
            // var_dump($insertedRole->id);
        }
        //TEST set role to department
        $this->post($this->path . '/department/role',
                    ['department' => ['id' => 123123], 'role' => ['id' => $insertedRole->id]], $this->headers)
            ->assertSuccessful();

        //TEST remove role from department
        $deletePath = $this->path . '/department/123123/role/' . $insertedRole->id;
        // var_dump($deletePath);

        // $client = new GuzzleHttp\Client();
        // $response = $client->delete(env('APP_URL') . $deletePath, ['headers' => $this->headers]);
        // $this->assertEquals(200, $response->getStatusCode());
        // dd($this->headers);
        $response = $this->delete($this->path . '/department/123123/role/' . $insertedRole->id, $this->headers);

        //Test delete inserted permission
        $deletePath = $this->path . '/role/' . $insertedRole->id;
        //var_dump($deletePath);

        // $client = new GuzzleHttp\Client();
        // $response = $client->delete(env('APP_URL') . $deletePath, ['headers' => $this->headers]);
        // $this->assertEquals(200, $response->getStatusCode());

        // delete
        $response = $this->delete($this->path . '/role/' . $insertedRole->id, $this->headers)
            ->assertSuccessful();

        Role::destroy($insertedRole->id);
    }

    /**
     * @group permission
     */
    public function prepareTestEnvironment()
    {
        if (!$this->company) {
            $this->createNewTestCompany();
        }

        if (!$this->user) {
            $this->createNewTestUser();
            $this->headers = $this->headers($this->user);
            $this->createNewDepartment();
            // Add user to department;
            DepartmentUsers::create(['id' => 123123, 'department_id' => $this->department->id, 'user_id' => $this->user->id]);

            $this->createManagePermissionRole();
        }
    }

    /**
     * @group permission
     */
    public function createNewTestUser()
    {
        $user = new User();
        $user->id = 123123;
        $user->firstname = 'testFName';
        $user->lastname = 'testLName';
        $user->email = 'testmail@testmail.com';
        $user->status = 1;
        $user->confirmed = 1;
        $user->locked = 0;
        $user->is_admin = 1;
        $user->company_id = $this->company->id;
        $user->password = Hash::make('test');
        $user->save();
        $this->user = $user;
    }

    /**
     * @group permission
     */
    public function createNewTestCompany()
    {
        $company = new Company();
        $company->id = 123123;
        $company->title = 'testCompany';
        $company->save();
        $this->company = $company;

        CompanyLanguage::insert(['company_id' => '123123', 'language_id' => 1]);
        CompanySettings::insert(['company_id' => '123123', 'setting_id' => 1, 'value' => 1]);
    }

    /**
     * @group permission
     */
    public function createNewDepartment()
    {
        $department = new Department();
        $department->id = 123123;
        // $department->created_by = $this->user->id;
        $department->company_id = $this->company->id;
        $department->save();
        $this->department = $department;
    }

    /**
     * @group permission
     */
    public function createManagePermissionRole()
    {
        Permission::insert($this->permissionsManage);
        Permission::insert($this->currencyPermissions);

        $role = new Role();
        $role->id = 123123;
        $role->code = 'PermissionManager';
        $role->save();
        $this->managePermissionsRole = $role;
        DepartmentRoles::create(['id' => 123123, 'department_id' => $this->department->id, 'role_id' => $this->managePermissionsRole->id]);

        foreach ($this->permissionsManage as $perm) {
            RolePermission::insert(['role_id' => $this->managePermissionsRole->id, 'permission_id' => $perm['id'], 'value' => 1]);
        }

    }

    /**
     * @group permission
     * @throws \Exception
     */
    public function removeAllTestData()
    {
        Role::where('code', 'TestRole')->delete();
        User::destroy(123123);
        Company::destroy(123123);
        Role::destroy(123123);
        Department::destroy(123123);
        DepartmentUsers::where('department_id', 123123)->delete();
        DepartmentRoles::where('department_id', 123123)->delete();
        RolePermission::where('role_id', 123123)->delete();
        Permission::whereBetween('id', [900, 1015])->delete();
        CompanyLanguage::where('company_id', 123123)->delete();
        CompanySettings::where('company_id', 123123)->delete();
    }

}
